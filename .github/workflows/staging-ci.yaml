name: CI Test for staging

on:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-with-docker:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_CI }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER_CI }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_CI }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB_CI }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/hydrogen'
      - uses: pnpm/action-setup@v2
        with:
          version: 8  
      - name: Install wait-on
        run: pnpm i -g wait-on@6.0.1
      - name: Setup Postgres container
        run: pnpm run setup:ci
      - name: Build and test backend
        run: docker compose -f docker-compose-ci.yml build backend
      - name: Build and test frontend
        run: docker compose -f docker-compose-ci.yml build frontend
      # e2e test currently removed from CI as it is unstable
      # - name: Run backend and frontend containers
      #   run: |-
      #     docker run --rm --network host --name backend -d trofos_backend
      #     docker run --rm --network host --name frontend -d trofos_frontend
      # - name: Wait for backend and frontend containers to start
      #   run: wait-on --timeout 120000 http://localhost:3000 http://localhost:3001
      # - name: Run e2e test
      #   run: docker exec backend npm run test-e2e
      - name: Clean up containers
        if: always()
        run: pnpm run cleanup:ci
      - name: Send notification on failure
        if: failure()
        run: |
          message="[CI Failed]
          Commit: ${{ github.sha }}
          View full log here: https://github.com/Project-Trofos/trofos/actions/runs/${{ github.run_id }}
          "
          curl --data-urlencode "text=${message}" ${{ secrets.NOTIFICATION_API }}
  build-front:
    runs-on: ubuntu-latest
    needs: test-with-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/trofos/frontend
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./packages/frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-back:
    runs-on: ubuntu-latest
    needs: test-with-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/trofos/backend
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: ./packages/backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    needs: [build-front, build-back]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps: 
      - name: Send deployment request to webhook
        run: curl ${{ secrets.DEPLOYMENT_WEBHOOK_API }}
      - name: Send notification on failure
        if: failure()
        run: |
          message="[Build Failed]
          Commit: ${{ github.sha }}
          View full log here: https://github.com/Project-Trofos/trofos/actions/runs/${{ github.run_id }}
          "
          curl --data-urlencode "text=${message}" ${{ secrets.NOTIFICATION_API }}
