import React, { useMemo, useState } from 'react';
import { useParams } from 'react-router-dom';
import { List, message, Typography } from 'antd';
import dayjs from 'dayjs';
import { DragDropContext, DropResult } from 'react-beautiful-dnd';
import { useGetSprintsByProjectIdQuery } from '../../api/sprint';
import { useUpdateBacklogMutation } from '../../api/socket/backlogHooks';
import type { Sprint } from '../../api/sprint';
import SprintCreationModal from '../../components/modals/SprintCreationModal';
import SprintListingCard from '../../components/cards/SprintListingCard';
import BacklogList from '../../components/lists/BacklogList';
import BacklogCreationModal from '../../components/modals/BacklogCreationModal';
import StrictModeDroppable from '../../components/dnd/StrictModeDroppable';
import './ProjectSprints.css';
import Container from '../../components/layouts/Container';
import EpicCreationModal from '../../components/modals/EpicCreationModal';
import { Epic } from '../../api/types';
import EpicListingCard from '../../components/cards/EpicListingCard';
import { useGetEpicsByProjectIdQuery } from '../../api/backlog';
import { GENERIC_NEW_SPRINT, autoSuggestNewSprint } from '../../helpers/sprintCreationHelper';
import GenericBoxWithBackground from '../../components/layouts/GenericBoxWithBackground';

function ProjectSprints(): JSX.Element {
  const params = useParams();
  const { Title } = Typography;

  const [sprintToEdit, setSprintToEdit] = useState<Sprint | undefined>(undefined);
  const [isModalVisible, setIsModalVisible] = useState(false);

  const projectId = Number(params.projectId);
  const { data: sprintsData } = useGetSprintsByProjectIdQuery(projectId);
  const { data: epicData } = useGetEpicsByProjectIdQuery({ projectId: projectId });

  const [updateBacklog] = useUpdateBacklogMutation();

  const sortSprintsByStartDate = (s1: Sprint, s2: Sprint) => {
    if (!s1.start_date) {
      return 1;
    }
    if (!s2.start_date) {
      return -1;
    }
    return dayjs(s1.start_date).isAfter(dayjs(s2.start_date)) ? 1 : -1;
  };

  const sortEpicsByDescendingId = (e1: Epic, e2: Epic) => {
    return e2.epic_id - e1.epic_id;
  };

  const sprints = useMemo(() => {
    const sprintsDataCopy = sprintsData?.sprints ? [...sprintsData.sprints] : [];
    sprintsDataCopy.sort(sortSprintsByStartDate);
    return sprintsDataCopy;
  }, [sprintsData]);

  const epics = useMemo(() => {
    const epicsDataCopy = epicData ? [...epicData] : [];
    epicsDataCopy.sort(sortEpicsByDescendingId);
    return epicsDataCopy;
  }, [epicData]);

  const backlogs = sprintsData?.unassignedBacklogs;

  const renderSprintListingCards = (sprint: Sprint) => (
    <List.Item className="sprint-card-container">
      <SprintListingCard sprint={sprint} setSprint={setSprintToEdit} setIsModalVisible={setIsModalVisible} />
    </List.Item>
  );

  const renderEpicListingCards = (epic: Epic) => (
    <List.Item className="epic-card-container">
      <EpicListingCard epic={epic} />
    </List.Item>
  );

  const autoGeneratedNewSprint =
    sprints && sprints.length > 0 ? autoSuggestNewSprint(sprints[sprints.length - 1]) : GENERIC_NEW_SPRINT;

  const onDragEnd = async (result: DropResult) => {
    const { destination, source, draggableId } = result;

    if (!destination || destination.droppableId === source.droppableId) {
      return;
    }

    try {
      const payload = {
        projectId,
        backlogId: Number(draggableId),
        srcSprintId: Number(source.droppableId) || null,
        fieldToUpdate: {
          sprint_id: Number(destination.droppableId) || null,
        },
      };
      await updateBacklog(payload).unwrap();
      message.success({ content: 'Backlog moved', key: 'backlogUpdateMessage' });
    } catch (e) {
      message.error({ content: 'Failed to move backlog', key: 'backlogUpdateMessage' });
      console.error(e);
    }
  };

  return (
    <GenericBoxWithBackground>
      <div className="project-sprint-title-container">
        <Title className="project-sprint-title" level={2}>
          Sprints
        </Title>
        <SprintCreationModal
          isModalVisible={isModalVisible}
          setIsModalVisible={setIsModalVisible}
          sprint={sprintToEdit}
          setSprint={setSprintToEdit}
          latestSprint={autoGeneratedNewSprint}
        />
        <BacklogCreationModal />
        <EpicCreationModal />
      </div>
      <DragDropContext onDragEnd={onDragEnd}>
        <div className="sprint-list">
          <Title level={5}>Current Sprints:</Title>
          <List
            dataSource={sprints?.filter((sprint) => sprint.status === 'current')}
            renderItem={renderSprintListingCards}
          />
        </div>
        <div className="sprint-list">
          <Title level={5}>Upcoming Sprints:</Title>
          <List
            dataSource={sprints?.filter((sprint) => sprint.status === 'upcoming')}
            renderItem={renderSprintListingCards}
          />
        </div>
        <div className="sprint-list">
          <Title level={5}>Unassigned Backlogs:</Title>
          <StrictModeDroppable droppableId="null">
            {(provided) => (
              <div ref={provided.innerRef} {...provided.droppableProps}>
                <BacklogList backlogs={backlogs} />
                {provided.placeholder}
              </div>
            )}
          </StrictModeDroppable>
        </div>
        <div className="sprint-list">
          <Title level={5}>Completed Sprints:</Title>
          <List
            dataSource={sprints?.filter((sprint) => sprint.status === 'completed' || sprint.status === 'closed')}
            renderItem={renderSprintListingCards}
          />
        </div>
      </DragDropContext>
      <div className="epic-list">
          <Title level={5}>Epics:</Title>
          <List
            dataSource={epics}
            renderItem={renderEpicListingCards}
          />
      </div>
    </GenericBoxWithBackground>
  );
}

export default ProjectSprints;
