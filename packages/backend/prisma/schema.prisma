generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  id              Int @id @default(autoincrement())
  current_year    Int
  current_sem     Int
}

model User {
  user_id Int @id @default(autoincrement())
  user_email String @unique @db.VarChar(320)
  user_password_hash String? @db.VarChar(4000)
  projects      UsersOnProjects[]
  courses       UsersOnCourses[]
  basicRoles UsersOnRoles[]
  courseRoles UsersOnRolesOnCourses[]
}

model UserSession {
  session_id String @id
  user_email String
  user_role_id Int
  user_id Int
  user_is_admin Boolean
  session_expiry DateTime @default(dbgenerated("NOW() + interval '1 day'"))
}

model Course {
  id            Int               @id @default(autoincrement())
  code          String            @default(uuid())
  startYear     Int
  startSem      Int               
  endYear       Int
  endSem        Int               
  cname         String            @db.VarChar(256)
  description   String?
  users         UsersOnCourses[]
  projects      Project[]
  milestones    Milestone[]
  announcements Announcement[]
  public        Boolean           @default(false)
  created_at    DateTime          @default(now())
  courseRoles UsersOnRolesOnCourses[]
  shadow_course Boolean           @default(false)
  @@unique([code, startYear, startSem])
}

model UsersOnCourses {
  course_id               Int
  course                  Course            @relation(fields: [course_id], references: [id], onDelete: Cascade)
  user_id                 Int
  user                    User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  created_at              DateTime          @default(now())

  created_announcements   Announcement[]
  @@id([course_id, user_id])
}

model Project {
  id              Int               @id @default(autoincrement())
  pname           String            @db.VarChar(256)
  pkey            String?           @db.VarChar(64)
  description     String?

  // A project might not belong to a course (open project)
  course_id       Int
  course          Course           @relation(fields: [course_id], references: [id], onDelete: Cascade)

  users           UsersOnProjects[]
  public          Boolean           @default(false)
  created_at      DateTime          @default(now())

  backlog_counter Int               @default(0)

  sprints         Sprint[]
  backlogs        Backlog[]
  backlogStatuses BacklogStatus[]

  projectGitLink  ProjectGitLink?
}

model Announcement {
  id             Int              @id @default(autoincrement())
  title          String
  content        String
  course_id      Int
  course         Course           @relation(fields: [course_id], references: [id], onDelete: Cascade)

  user_id        Int?
  user           UsersOnCourses?  @relation(fields: [user_id, course_id], references: [user_id, course_id])

  created_at     DateTime         @default(now())
  updated_at     DateTime?
}

model Milestone {
  id             Int              @id @default(autoincrement())
  name           String
  course_id      Int
  course         Course           @relation(fields: [course_id], references: [id], onDelete: Cascade)
  start_date      DateTime
  deadline       DateTime

  created_at     DateTime         @default(now())
}

model UsersOnProjects {
  project_id        Int
  project           Project       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user_id           Int
  user              User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  created_at        DateTime      @default(now())
  reported_backlogs Backlog[]     @relation("ReportedBacklogs")
  assigned_backlogs Backlog[]     @relation("AssignedBacklogs")
  comments          Comment[]
  @@id([project_id, user_id])
}

model Backlog {
  backlog_id    Int
  summary       String
  type          BacklogType?
  sprint        Sprint?           @relation(fields: [sprint_id], references: [id], onDelete: SetNull)
  sprint_id     Int?
  priority      BacklogPriority?
  reporter      UsersOnProjects   @relation("ReportedBacklogs", fields: [reporter_id, project_id], references: [user_id, project_id])
  reporter_id   Int
  assignee      UsersOnProjects?  @relation("AssignedBacklogs", fields: [assignee_id, project_id], references: [user_id, project_id])
  assignee_id   Int?
  project_id    Int
  project       Project           @relation(fields: [project_id], references: [id], onDelete: Cascade)
  points        Int?
  description   String?
  backlogStatus BacklogStatus     @relation(fields: [project_id, status], references: [project_id, name])
  status        String
  comments      Comment[]

  @@id([project_id, backlog_id])
}

// Track history of backlog for analysis
model BacklogHistory {
  project_id    Int
  backlog_id    Int

  sprint_id     Int?
  sprint        Sprint?          @relation(fields: [sprint_id], references: [id], onDelete: Cascade)

  history_type  HistoryType

  // Data in a Backlog
  type          BacklogType?
  priority      BacklogPriority?
  reporter_id   Int
  assignee_id   Int?
  points        Int?
  status        String
  backlogStatus BacklogStatus     @relation(fields: [project_id, status], references: [project_id, name], onDelete: Cascade)

  date          DateTime          @default(now())
  @@id([project_id, backlog_id, date])
}

model BacklogStatus {
  project           Project           @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id        Int
  name              String
  type              BacklogStatusType @default(in_progress)
  backlogs          Backlog[]
  order             Int
  backlog_histories BacklogHistory[]
  @@id([project_id, name])
}

model Comment {
  comment_id    Int               @id @default(autoincrement())
  backlog       Backlog           @relation(fields: [backlog_id, project_id], references: [backlog_id, project_id], onDelete: Cascade)
  backlog_id    Int
  commenter     UsersOnProjects   @relation(fields: [commenter_id, project_id], references: [user_id, project_id])
  commenter_id  Int
  project_id    Int
  content       String
  created_at    DateTime          @default(now())
  updated_at    DateTime?
}

model Sprint {
  id              Int               @id @default(autoincrement())
  name            String
  duration        Int               // 0 = custom, 1 = 1 week, 2 = 2 weeks, 3 = 3 weeks, 4 = 4 weeks
  start_date      DateTime?
  end_date        DateTime?
  project         Project           @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id      Int
  goals           String?
  status          SprintStatus      @default(upcoming)
  backlogs        Backlog[]
  backlog_history BacklogHistory[]
  retrospective   SprintRetrospective[]
}

model Role {
  id Int @id @default(autoincrement())
  role_name String @unique @db.VarChar(50)
  actions ActionsOnRoles[]
  basicRoles UsersOnRoles[]
  courseRoles UsersOnRolesOnCourses[]
  
}

model ActionsOnRoles {
  role_id Int
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  action Action
  @@unique([role_id, action])
}

model UsersOnRoles {
  user_email String @unique @db.VarChar(320)
  user User @relation(fields: [user_email], references: [user_email], onDelete: Cascade)
  role_id Int
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

model ProjectGitLink {
  project       Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id    Int       @id
  repo          String
}

model UsersOnRolesOnCourses {
  id Int @id @default(autoincrement())
  user_email String @db.VarChar(320)
  user User @relation(fields: [user_email], references: [user_email], onDelete: Cascade)
  role_id Int
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  course_id Int
  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)
  @@unique([user_email, course_id])
}

model SprintRetrospective {
  id          Int                         @id @default(autoincrement())
  sprint      Sprint                      @relation(fields: [sprint_id], references: [id], onDelete: Cascade) 
  sprint_id   Int
  content     String
  type        RetrospectiveType
  score       Int                         @default(0)
  votes       SprintRetrospectiveVote[]
}

model SprintRetrospectiveVote {
  retro       SprintRetrospective @relation(fields: [retro_id], references: [id], onDelete: Cascade)
  retro_id    Int
  // To keep it simple, user_id is not related to any user models to allow for anonymous votes in the future
  user_id     Int
  type        RetrospectiveVoteType
  @@id([retro_id, user_id])
}

enum Action {
  // Course related actions
  create_course
  read_course
  update_course
  delete_course
  // Project related actions
  create_project
  read_project
  update_project
  delete_project
  // User related actions
  read_users
  create_users
  // Admin action
  admin
}

enum BacklogType {
  story
  task
  bug
}

enum BacklogPriority {
  very_high
  high
  medium
  low
  very_low
}

enum BacklogStatusType {
  todo
  in_progress
  done
}

enum SprintStatus {
  upcoming
  current
  completed
  closed
}

enum HistoryType {
  create
  update
  delete
}

enum RetrospectiveType {
  positive
  negative
  action
}

enum RetrospectiveVoteType {
  up
  down
}
