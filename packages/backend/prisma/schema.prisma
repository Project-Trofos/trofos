generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id Int @id @default(autoincrement())
  user_email String @unique @db.VarChar(320)
  user_password_hash String? @db.VarChar(4000)
  projects      UsersOnProjects[]
  courses       UsersOnCourses[]
  roles         UsersOnRoles[]
}

model UserSession {
  session_id String @id
  user_email String
  user_role_id Int
  user_id Int
  user_is_admin Boolean
  session_expiry DateTime @default(dbgenerated("NOW() + interval '1 day'"))
}

model Course {
  id            String            @default(uuid())
  year          Int
  sem           Int               
  cname         String            @db.VarChar(256)
  description   String?
  users         UsersOnCourses[]
  projects      Project[]
  public        Boolean           @default(false)
  created_at    DateTime          @default(now())
  @@id([id, year, sem])
}

model UsersOnCourses {
  course_id     String
  course_year   Int
  course_sem    Int
  course        Course            @relation(fields: [course_id, course_year, course_sem], references: [id, year, sem], onDelete: Cascade)
  user_id       Int
  user          User              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  created_at    DateTime          @default(now())
  @@id([course_id, course_year, course_sem, user_id])
}

model Project {
  id              Int               @id @default(autoincrement())
  pname           String            @db.VarChar(256)
  pkey            String?           @db.VarChar(64)
  description     String?

  // A project might not belong to a course (open project)
  course_id       String?
  course_year     Int?
  course_sem      Int?
  course          Course?           @relation(fields: [course_id, course_year, course_sem], references: [id, year, sem], onDelete: SetNull)

  users           UsersOnProjects[]
  public          Boolean           @default(false)
  created_at      DateTime          @default(now())

  backlog_counter Int               @default(0)

  sprints         Sprint[]
}

model UsersOnProjects {
  project_id        Int
  project           Project       @relation(fields: [project_id], references: [id], onDelete: Cascade)
  user_id           Int
  user              User          @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  created_at        DateTime      @default(now())
  reported_backlogs Backlog[]     @relation("ReportedBacklogs")
  assigned_backlogs Backlog[]     @relation("AssignedBacklogs")
  @@id([project_id, user_id])
}

model Backlog {
  backlog_id    Int
  summary       String
  type          BacklogType?
  sprint        Sprint?           @relation(fields: [sprint_id], references: [id], onDelete: SetNull)
  sprint_id     Int?
  priority      BacklogPriority?
  reporter      UsersOnProjects   @relation("ReportedBacklogs", fields: [reporter_id, project_id], references: [user_id, project_id])
  reporter_id   Int
  assignee      UsersOnProjects?  @relation("AssignedBacklogs", fields: [assignee_id, project_id], references: [user_id, project_id])
  assignee_id   Int?
  project_id    Int
  points        Int?
  description   String?
  status        BacklogStatus     @default(todo)
  @@id([project_id, backlog_id])
}

model Sprint {
  id            Int               @id @default(autoincrement())
  name          String
  duration      Int               // 0 = custom, 1 = 1 week, 2 = 2 weeks, 3 = 3 weeks, 4 = 4 weeks
  start_date    DateTime?
  end_date      DateTime?
  project       Project           @relation(fields: [project_id], references: [id])
  project_id    Int
  goals         String?
  status        SprintStatus      @default(upcoming)
  backlogs      Backlog[]
}

model Role {
  id Int @id @default(autoincrement())
  role_name String @unique @db.VarChar(50)
  actions ActionsOnRoles[]
  users UsersOnRoles[]
}

model ActionsOnRoles {
  role_id Int
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  action Action
  @@unique([role_id, action])
}

model UsersOnRoles {
  user_email String @unique @db.VarChar(320)
  user User @relation(fields: [user_email], references: [user_email], onDelete: Cascade)
  role_id Int
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
}

enum Action {
  // Course related actions
  create_course
  read_course
  update_course
  delete_course
  // Project related actions
  create_project
  read_project
  update_project
  delete_project
  // User related actions
  read_users
  create_users
  // Admin action
  admin
}

enum BacklogType {
  story
  task
  bug
}

enum BacklogPriority {
  very_high
  high
  medium
  low
  very_low
}

enum BacklogStatus {
  todo
  in_progress
  done
}

enum SprintStatus {
  upcoming
  current
  completed
  closed
}
